#!/usr/bin/env perl
#
#   A script that validates PFX JSON files against PFX v2 JSON schema
#
#   Last Modified: Sep/17/2022
#
#   Version 0.0.0b
#
#   Copyright (C) 2022 Manuel Rueda (manuel.rueda@cnag.crg.eu)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, see <https://www.gnu.org/licenses/>.
#
#   If this program helps you in your research, please cite.

use strict;
use warnings;
use feature qw(say);
use autodie;
use Getopt::Long qw(:config posix_default);
use Pod::Usage;
use Path::Tiny;
use Data::Dumper;
use JSON::XS;
use JSON::Validator;
use Term::ANSIColor       qw(:constants);
use FindBin               qw($Bin);
use File::Spec::Functions qw(catdir catfile);

my $debug   = 0;
my $verbose = 0;

##### Main #####
validate_input_data();
################
exit;

sub validate_input_data {

    # Defining a few variables
    my $version    = '0.0.0b';
    my $schema_dir = catdir( $Bin, 'schema' );

    # Reading arguments
    GetOptions(
        'input|i=s{1,}'  => \my @in_files,                             # array
        'schema-dir|s=s' => \$schema_dir,                              # string
        'help|?'         => \my $help,                                 # flag
        'man'            => \my $man,                                  # flag
        'debug=i'        => \$debug,                                   # integer
        'verbose'        => \$verbose,                                 # flag
        'no-color|nc'    => \my $no_color,                             # flag
        'version|v'      => sub { say "$0 Version $version"; exit; }
    ) or pod2usage(2);
    pod2usage(1)                              if $help;
    pod2usage( -verbose => 2, -exitval => 0 ) if $man;
    pod2usage(
        -message => "Please specify a valid input file(s) -i <*json>\n",
        -exitval => 1
    ) unless (@in_files);
    pod2usage(
        -message => "Please specify a valid directory for --schema-dir\n",
        -exitval => 1
    ) if ( !-d $schema_dir );

    # Turning color off if argument <--no-color>
    $ENV{'ANSI_COLORS_DISABLED'} = 1 if $no_color;

    # Load schema (once)
    my $schema =
      read_json( catfile( $schema_dir, 'phenopacket-schema-2-0.json' ) );

    # Create validator object
    my $validator = JSON::Validator->new;

    # Load schema in object
    $validator->schema($schema);

    # Start printing to STDOUT
    say BOLD CYAN program_header($version) if $verbose;

    # Finally validate each file
    for my $file (@in_files) {
        say BOLD BLUE "==== PROCESSING <$file> file ====", RESET;;
        process_files( { file => $file, validator => $validator } );
    }
}

sub process_files {

    my $arg       = shift;
    my $file      = $arg->{file};
    my $validator = $arg->{validator};

    # Read data
    my $data = read_json($file);

    # Validate data
    my $errors = check_array( { data => $data, validator => $validator } );

    # Print errors to STDOUT
    say_errors($errors);

    return 1;
}

sub check_array {

    my $arg       = shift;
    my $data      = $arg->{data};
    my $validator = $arg->{validator};

    # We will store ieach "Row" errors as elements of $errors
    my $errors = [];

    # ARRAY
    if ( ref $data eq ref [] ) {
        say "ARRAY" if $debug;
        my $count = 1;
        for (@$data) {
            say "Validating JSON document $count" if $debug;

            # Validation with JSON::Validator
            my $error = validate_against_json_schema(
                { data => $_, validator => $validator } );
            push @{$errors}, ( "Row " . $count . ':', join "\n", @$error )
              if defined $error;
            $count++;
        }
    }

    # NON-ARRAY
    else {
        say "HASH"                  if $debug;
        say "Only 1 document found" if $debug;
        my $error = validate_against_json_schema(
            { data => $data, validator => $validator } );
        push @{$errors}, ( "Row " . '1' . ':', join "\n", @$error )
          if defined $error;
    }

    return wantarray ? @$errors : $errors;
}

sub read_json {

    my $str = path(shift)->slurp_utf8;
    return decode_json($str);    # Decode to Perl data structure
}

sub validate_against_json_schema {

    my $arg       = shift;
    my $json      = $arg->{data};
    my $validator = $arg->{validator};

    # Validate
    my $errors = [ $validator->validate($json) ];

    # Return errors as ref
    return scalar @$errors ? $errors : undef;
}

sub program_header {

    my $version = shift;
    my $str     = <<EOF;
****************************************
*      Phenopacket JSON Validator      *
*          - PFX-VALIDATOR -           *
*          Version: $version             *
*      (C) 2022 Manuel Rueda, PhD      *
*    GNU General Public License v3     *
****************************************
EOF
    return $str;
}

sub say_errors {

    my $errors = shift;
    if ( @{$errors} ) {
        say BOLD RED( join "\n", @{$errors} ), RESET;
    }
    else {
        say BOLD GREEN 'Hurray! No errors found', RESET;
    }
    return 1;
}

=head1 NAME

pfx-validator: A script that validates PFX JSON files against PFX v2 JSON schema.

=head1 SYNOPSIS


pfx-validator -i <*json> [-options]

     Arguments:                       
       -i|input                       Phenopacket JSON file(s)

     Options:
       -s|schema-dir                  Directory with Phenopacket v2 JSON schema 
       -h|help                        Brief help message
       -man                           Full documentation
       -debug                         Print debugging (from 1 to 5, being 5 max)
       -verbose                       Verbosity on
       -nc|-no-color                  Don't print colors to STDOUT

=head1 DESCRIPTION

pfx-validator: A script that validates PFX JSON files against PFX v2 JSON schema.

=head1 SUMMARY

pfx-validator: A script that validates PFX JSON files against PFX v2 JSON schema.

=head1 INSTALLATION

The script runs on command-line Linux (tested on Debian-based distribution). Perl 5 is installed by default on Linux, 
but we will install a few CPAN modules with C<cpanminus>.

Please download the C<cpanfile> from the repo:

  wget https://raw.githubusercontent.com/mrueda/Convert-Pheno/main/cpanfile

First we install cpanminus (with sudo privileges):

  sudo apt-get install cpanminus

Then the modules:

  cpanm --sudo --installdeps .

If you prefer to have the dependencies in a "virtual environment" (i.e., install the CPAN modules in the directory of the application) we recommend using the module C<Carton>.

  cpanm --sudo Carton

Then, we can install our dependencies:

  carton install

=head1 HOW TO RUN PFX-VALIDATOR

For executing convert-pheno you will need:

=over

=item Input file(s):
      
A Phenopacket file(s) in JSON format.

=back

B<Examples:>

 $ pfx-validator -i phenopackets.json 

 $ $path/pfx-validator -i phenopackets*.json

 $ carton exec -- $path/pfx-validator -i phenopackets.json # If using Carton

=head2 COMMON ERRORS AND SOLUTIONS

 * Error message: Foo
   Solution: Bar

 * Error message: Foo
   Solution: Bar

=head1 CITATION

The author requests that any published work that utilizes C<Convert-Pheno> includes a cite to the the following reference:

Rueda, M., (2022). Convert-Pheno: A toolbox to interconvert common data models for phenotypic data [Software]. Available from https://github.com/mrueda/Convert-Pheno

=head1 AUTHOR 

Written by Manuel Rueda, PhD. Info about CNAG can be found at L<https://www.cnag.crg.eu>.

=head1 REPORTING BUGS

Report bugs or comments to <manuel.rueda@cnag.crg.eu>.

=head1 COPYRIGHT

This PERL file is copyrighted. See the LICENSE file included in this distribution.

=cut
