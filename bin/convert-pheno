#!/usr/bin/env perl
#
#   A script that interconverts phenotypic data between different CDM formats
#
#   Last Modified: Jul/01/2022
#
#   Version 2.0.0
#
#   Copyright (C) 2021-2022 Manuel Rueda (manuel.rueda@crg.eu)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, see <https://www.gnu.org/licenses/>.
#
#   If this program helps you in your research, please cite.

package main;

use strict;
use warnings;
use feature qw(say);
use autodie;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use JSON::XS;
use File::Spec::Functions qw(catdir catfile);
use FindBin               qw($Bin);
use lib "$Bin/../lib";
use Path::Tiny;
use Term::ANSIColor qw(:constants);
use Convert::Pheno;
$Data::Dumper::Sortkeys = 1;

my $debug   = 0;
my $verbose = 0;

# Defining a few variables
my $version = '0.0.0b';
my $out_dir = '.';
my $individuals_json = 'individuals.json';

# Reading arguments
GetOptions(
    'ipxf=s{1,}'    => \my @in_files,                             # array
    'obff=s'        => \$individuals_json,                        # string
    'out-dir|o=s'   => \$out_dir,                                 # string
    'help|?'        => \my $help,                                 # flag
    'man'           => \my $man,                                  # flag
    'debug=i'       => \$debug,                                   # integer
    'verbose'       => \$verbose,                                 # flag
    'no-color|nc'   => \my $no_color,                             # flag
    'version|v'     => sub { say "$0 Version $version"; exit; }
) or pod2usage(2);
pod2usage(1)                              if $help;
pod2usage( -verbose => 2, -exitval => 0 ) if $man;
pod2usage(
    -message => "Please specify a valid input file(s) -i <*json>\n",
    -exitval => 1
) unless (@in_files);
pod2usage(
    -message => "Please specify a valid directory for --out-dir\n",
    -exitval => 1
) if ( !-d $out_dir );

# Turning color off if argument <--no-color>
$ENV{'ANSI_COLORS_DISABLED'} = 1 if $no_color;

# Defining a few more variables
my $individuals_file = catfile( $out_dir, $individuals_json);

# Start printing to STDOUT
say BOLD CYAN program_header($version);

#############################
# START DATA TRANSFORMATION #
#############################
my $individuals = [];
for my $file (@in_files) {
    say BOLD BLUE "==== Processing: <$file> ====", RESET;
    my $convert = Convert::Pheno->new( { pxf_file => $file } );
    push @{$individuals}, $convert->map_pxf2bff;
}
say BOLD GREEN "Writing <$individuals_file> file\n";
write_json( $individuals_file, $individuals );
###########################
# END DATA TRANSFORMATION #
###########################

sub program_header {

    my $version = shift;
    my $str     = <<EOF;
****************************************
*  Phenotypic Data Model Convert Tool  *
*          - CONVERT-PHENO -           *
*          Version: $version             *
*      (C) 2022 Manuel Rueda, PhD     *
*    GNU General Public License v3     *
****************************************
EOF
    return $str;
}

=head1 NAME

B<UNDER DEVELOPMENT>

convert-pheno - A script to interconvert phenotypic data between different CDM formats

=head1 SYNOPSIS

convert-pheno [-i input-type] <infile> [-o output-type] <outfile> [-options]

     Arguments:                       
       -input-type:  
             -ipxf                    Phenopackets JSON file(s)
             -ibff                    Beacon v2 JSON file (JSON array)

            (Wish-list)
             #-iomop                  OMOP-CDM csv file
             #-icdisc                 CDISC csv file
             #-ifhir                  FHIR csv file
             #-iredcap                RedCap csv file
       -output-type;
             -opxf                    Phenopackets JSON file (JSON array)
             -obff                    Beacon v2 JSON file (JSON array)

             (Wish-list)
             #-oomop                  OMOP-CDM csv file
             #-ocdisc                 CDISC csv file
             #-ofhir                  FHIR csv file
             #-oredcap                RedCap csv file

     Options:
       -out-dir                       Output (existing) directory
       -h|help                        Brief help message
       -man                           Full documentation
       -debug                         Print debugging (from 1 to 5, being 5 max)
       -verbose                       Verbosity on
       -nc|-no-color                  Don't print colors to STDOUT
     
=head1 DESCRIPTION

convert-pheno  is a commandline frontend to the module Convert::Pheno.

=head1 CITATION

To be defined.

=head1 SUMMARY

A script that uses Convert::Pheno to interconverts phenotypic data between different CDM formats


I<NB:> If the input file consists of is a JSON array the output file will also be a JSON array.

=head1 HOW TO RUN PHENO-CONVERT

The script runs on command-line Linux (tested on Debian-based distribution). Perl 5 is installed by default on Linux, 
but we will install a few CPAN modules with C<cpanminus>.

First we install cpanminus (with sudo privileges):

   $ sudo apt-get install cpanminus

Then the modules:

   $ cpanm --sudo --installdeps .

If you prefer to have the dependencies in a "virtual environment" (i.e., install the CPAN modules in the directory of the application) we recommend using the module C<Carton>.

   $ cpanm --sudo Carton

Then, we can install our dependencies:

   $ carton install

For executing convert-pheno you will need:

=over

=item Input file(s):
      
A list of Phenopackets JSON files (normally from the same dataset). Note that PXFs only contain ONE individual per file.

=back

B<Examples:>

   $ ./convert-pheno -ipxf in/*json -obff individuals.json

   $ $path/convert-pheno -ipxf file.json -obff individuals.json --out-dir my_bff_outdir

   $ $path/convert-pheno -ibff individuals.json -opxf phenopackets.json

   $ carton exec -- $path/convert-pheno -ibff individuals.json -opxf phenopackets.json # If using Carton

=head2 COMMON ERRORS AND SOLUTIONS

   * Error message: Foo
     Solution: Bar

   * Error message: Foo
     Solution: Bar


=head1 AUTHOR 

Written by Manuel Rueda, PhD. Info about CNAG can be found at L<https://www.cnag.crg.eu>.

=head1 REPORTING BUGS

Report bugs or comments to <manuel.rueda@cnag.crg.eu>.

=head1 COPYRIGHT

This PERL file is copyrighted. See the LICENSE file included in this distribution.

=cut
