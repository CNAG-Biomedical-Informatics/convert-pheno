#!/usr/bin/env perl
#
#   A script that interconverts phenotypic data between different CDM formats
#
#   This file is part of Convert::Pheno
#
#   Last Modified: Jul/28/2022
#
#   Version 0.0.0b
#
#   Copyright (C) 2022 Manuel Rueda (manuel.rueda@cnag.crg.eu)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, see <https://www.gnu.org/licenses/>.
#
#   If this program helps you in your research, please cite.

package main;

use strict;
use warnings;
use feature qw(say);
use autodie;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use JSON::XS;
use File::Spec::Functions qw(catdir catfile);
use FindBin               qw($Bin);
use lib "$Bin/../lib";
use Path::Tiny;
use Term::ANSIColor qw(:constants);
use Convert::Pheno;
$Data::Dumper::Sortkeys = 1;

# Defining a few variables
my $version = '0.0.0b';
my $out_dir = '.';

# Reading arguments
GetOptions(
    'ipxf=s'                  => \my $in_pxf,                               # array
    'ibff|s'                  => \my $in_bff,                               # string
    'iredcap=s'               => \my $in_redcap,                            # string
    'obff=s'                  => \my $out_bff,                              # string
    'opxf=s'                  => \my $out_pxf,                              # string
    'out-dir=s'               => \$out_dir,                                 # string
    'help|?'                  => \my $help,                                 # flag
    'man'                     => \my $man,                                  # flag
    'debug=i'                 => \my $debug,                                # integer
    'verbose'                 => \my $verbose,                              # flag
    'no-color|nc'             => \my $no_color,                             # flag
    'redcap-dictionary|rcd=s' => \my $redcap_dictionary,                    # string
    'print-hidden-labels|phl' => \my $print_hidden_labels,                  # flag
    'version|v'               => sub { say "$0 Version $version"; exit; }
) or pod2usage(2);
pod2usage(1)                              if $help;
pod2usage( -verbose => 2, -exitval => 0 ) if $man;
pod2usage(
    -message => "Please specify a valid input file(s) -i <*json>\n",
    -exitval => 1
) unless ( $in_pxf || $in_bff || $in_redcap );
pod2usage(
    -message => "Please specify a valid directory for --out-dir\n",
    -exitval => 1
) if ( !-d $out_dir );
pod2usage(
    -message => "Please specify a valid RedCap dictionary --rcd\n",
    -exitval => 1
) if ( $in_redcap && !$redcap_dictionary );

# Turning color off if argument <--no-color>
$ENV{'ANSI_COLORS_DISABLED'} = 1 if $no_color;

# Defining $out_file
my $out_file =  $out_pxf ? catfile( $out_dir, $out_pxf )
    : $out_bff ? catfile( $out_dir, $out_bff )
    : catfile( $out_dir, 'individuals.json' );

# Defining data as a hashref
my $data = {
      in_type => $in_pxf ? 'pxf'
    : $in_bff    ? 'bff'
    : $in_redcap ? 'redcap'
    : 'bff',
    out_type => $out_pxf ? 'pxf' : $out_bff ? 'bff' : 'bff',
    in_textfile => 1,
    in_file => $in_pxf ? $in_pxf
    : $in_bff    ? $in_bff
    : $in_redcap ? $in_redcap
    : 'individuals.json',
    redcap_dictionary   => $redcap_dictionary,
    print_hidden_labels => $print_hidden_labels,
    debug               => $debug,
    verbose             => $verbose
};
print Dumper $data if $debug;

# Start printing to STDOUT
say BOLD CYAN program_header($version) if $verbose;

#############################
# START DATA TRANSFORMATION #
#############################

convert($data, $out_file);

###########################
# END DATA TRANSFORMATION #
###########################

sub convert {

    my ($l_data, $o_file) = @_;

    if ($verbose) {
        print BOLD BLUE program_body( $l_data->{in_type}, $l_data->{out_type},
            $l_data->{in_file} );
        say BOLD GREEN "Writing <$o_file> file\n";
    }

    # Creating object
    my $convert = Convert::Pheno->new($l_data);

    # Running $method
    my $method = $l_data->{in_type} . '2' . $l_data->{out_type};

    # Writing file 
    write_json( { filename => $o_file, data => $convert->$method } );
}

sub program_body {

    my ( $in_type, $out_type, $file ) = @_;
    my $msg = <<EOF;
==== INPUT: <$in_type> OUTPUT: <$out_type> ====
==== Processing: <$file> ====
EOF
    return $msg;
}

sub program_header {

    my $version = shift;
    my $str     = <<EOF;
****************************************
*  Phenotypic Data Model Convert Tool  *
*          - CONVERT-PHENO -           *
*          Version: $version             *
*      (C) 2022 Manuel Rueda, PhD      *
*    GNU General Public License v3     *
****************************************
EOF
    return $str;
}

=head1 NAME

B<UNDER DEVELOPMENT>

convert-pheno - A script to interconvert phenotypic data between different CDM formats

=head1 SYNOPSIS

convert-pheno [-i input-type] <infile> [-o output-type] <outfile> [-options]

     Arguments:                       
       -input-type:  
             -ipxf                    Phenopacket JSON file
             -ibff                    Beacon v2 JSON file
             -iredcap                 REDCap CSV file

            (Wish-list)
             #-iomop                  OMOP-CDM CSV file
             #-icdisc                 CDISC CSV file
             #-ifhir                  FHIR CSV file

       -output-type;
             -opxf                    Phenopacket JSON file
             -obff                    Beacon v2 JSON file

             (Wish-list)
             #-oomop                  OMOP-CDM CSV file


     Options:
       -out-dir                       Output (existing) directory
       -h|help                        Brief help message
       -man                           Full documentation
       -debug                         Print debugging (from 1 to 5, being 5 max)
       -verbose                       Verbosity on
       -nc|-no-color                  Don't print colors to STDOUT
       -rcd|redcap-dictionary         Dictionary file (CSV) exported from REDCap
       -phl|print-hidden-labels       Print original values (before DB mapping) of text fields <_labels>
 #     -to-array                      Write all data to a JSON array (instead of objects)
     
=head1 DESCRIPTION

C<convert-pheno> is a command-line front-end to the CPAN's module L<Convert::Pheno>.

The module will be uploaded to CPAN once ready.

=head1 CITATION

To be defined.

=head1 SUMMARY

A script that uses L<Convert::Pheno> to interconvert phenotypic data between different CDM formats

=head1 INSTALLATION

=head2 Containerized

Please download the C<Dockerfile> from the repo:

   $ wget https://raw.githubusercontent.com/mrueda/Convert-Pheno/main/Dockerfile

And then run:

   $ docker build -t cnag/convert_pheno:latest .

To run the container (detached) execute:

   $ docker run -tid --name convert-pheno cnag/convert-pheno:latest

To enter:

   $ docker exec -ti convert-pheno bash

=head2 Non containerized

The script runs on command-line Linux (tested on Debian-based distribution). Perl 5 is installed by default on Linux, 
but we will install a few CPAN modules with C<cpanminus>.

First we install cpanminus (with sudo privileges):

   $ sudo apt-get install cpanminus

Then the modules:

   $ cpanm --sudo --installdeps .

If you prefer to have the dependencies in a "virtual environment" (i.e., install the CPAN modules in the directory of the application) we recommend using the module C<Carton>.

   $ cpanm --sudo Carton

Then, we can install our dependencies:

   $ carton install


=head1 HOW TO RUN PHENO-CONVERT

For executing convert-pheno you will need:

=over

=item Input file(s):
      
A text file in one of the accepted formats.

=back

B<Examples:>

   $ bin/convert-pheno -ipxf phenopackets.json -obff individuals.json

   $ $path/convert-pheno -ipxf file.json -obff individuals.json --out-dir my_bff_outdir

   $ $path/convert-pheno -iredcap redcap.csv -opxf phenopackets.json --redcap-dictionary redcap_dict.csv

   $ carton exec -- $path/convert-pheno -ibff individuals.json -opxf phenopackets.json # If using Carton

=head2 COMMON ERRORS AND SOLUTIONS

   * Error message: Foo
     Solution: Bar

   * Error message: Foo
     Solution: Bar


=head1 AUTHOR 

Written by Manuel Rueda, PhD. Info about CNAG can be found at L<https://www.cnag.crg.eu>.

=head1 REPORTING BUGS

Report bugs or comments to <manuel.rueda@cnag.crg.eu>.

=head1 COPYRIGHT

This PERL file is copyrighted. See the LICENSE file included in this distribution.

=cut
