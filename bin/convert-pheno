#!/usr/bin/env perl
#
#   A software toolkit for the interconversion of standard data models for phenotypic data
#
#   This file is part of Convert::Pheno
#
#   Last Modified: Jan/17/2023
#
#   $VERSION taken from Convert::Pheno
#
#   Copyright (C) 2022-2023 Manuel Rueda - CNAG (manuel.rueda@cnag.crg.eu)
#
#   License: Artistic License 2.0

package main;

use strict;
use warnings;
use feature qw(say);
use autodie;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use Sys::Hostname;
use POSIX                 qw(strftime);
use File::Spec::Functions qw(catdir catfile);
use File::Basename;
use FindBin qw($Bin);
use lib "$Bin/../lib";
use Term::ANSIColor qw(:constants);
use Convert::Pheno;
$Data::Dumper::Sortkeys = 1;

# Defining a few variables
my $out_dir                   = '.';
my $schema_file               = catfile( $Bin, '../schema/mapping.json' );
my $match                     = 'exact';
my $min_text_similarity_score = 0.8;

# Reading arguments
GetOptions(
    'ipxf=s'                      => \my $in_pxf,                              # string
    'ibff=s'                      => \my $in_bff,                              # string
    'iredcap=s'                   => \my $in_redcap,                           # string
    'icdisc=s'                    => \my $in_cdisc,                            # string
    'iomop=s{1,}'                 => \my @omop_files,                          # array
    'obff=s'                      => \my $out_bff,                             # string
    'opxf=s'                      => \my $out_pxf,                             # string
    'out-dir=s'                   => \$out_dir,                                # string
    'help|?'                      => \my $help,                                # flag
    'man'                         => \my $man,                                 # flag
    'mapping-file=s'              => \my $mapping_file,                        # string
    'max-lines-sql=i'             => \my $max_lines_sql,                       # integer
    'match=s'                     => \$match,                                  # string
    'min-text-similarity-score=f' => \$min_text_similarity_score,              # floating
    'debug=i'                     => \my $debug,                               # integer
    'verbose'                     => \my $verbose,                             # flag
    'no-color|nc'                 => \my $no_color,                            # flag
    'separator|sep=s'             => \my $sep,                                 # str
    'schema-file=s'               => \$schema_file,                            # str
    'sql2csv'                     => \my $sql2csv,                             # flag
    'test'                        => \my $test,                                # flag
    'ohdsi-db'                    => \my $ohdsi_db,                            # flag
    'redcap-dictionary|rcd=s'     => \my $redcap_dictionary,                   # string
    'print-hidden-labels|phl'     => \my $print_hidden_labels,                 # flag
    'self-validate-schema|svs'    => \my $self_validate_schema,                # flag
    'username=s'                  => \my $username,                            # string
    'log'                         => \my $log,                                 # flag
    'version|v'                   => sub { say "$0 Version $VERSION"; exit; }
) or pod2usage(2);
pod2usage(1)                              if $help;
pod2usage( -verbose => 2, -exitval => 0 ) if $man;
pod2usage(
    -message => "Please specify a valid input file(s) -i <json|yaml|csv>\n",
    -exitval => 1
) unless ( $in_pxf || $in_bff || $in_redcap || $in_cdisc || @omop_files );
pod2usage(
    -message => "Please specify a valid directory for --out-dir\n",
    -exitval => 1
) if ( !-d $out_dir );
pod2usage(
    -message => "Please specify a valid REDCap data dictionary --rcd\n",
    -exitval => 1
) if ( ( $in_redcap || $in_cdisc ) && !$redcap_dictionary );
pod2usage(
    -message => "Please specify a valid field-mapping file --mapping-file\n",
    -exitval => 1
) if ( ( $in_redcap || $in_cdisc ) && !$mapping_file );
pod2usage(
    -message => "Please specify a valid OMOP-CDM file(s) (e.g, *csv or .sql)\n",
    -exitval => 1
) if ( @omop_files && $omop_files[0] !~ m/\.csv|\.sql|\.tsv/i );
#pod2usage(
#    -message =>
#      "OHDSI database (<-ohdsi-db>) only works with <-iomop> argument\n",
#    -exitval => 1
#) if ( $ohdsi_db && !@omop_files );

# Turning color off if argument <--no-color>
$ENV{'ANSI_COLORS_DISABLED'} = 1 if $no_color;

# Defining $out_file
my $out_file =
    $out_pxf ? catfile( $out_dir, $out_pxf )
  : $out_bff ? catfile( $out_dir, $out_bff )
  :            catfile( $out_dir, 'individuals.json' );

# Defining $log_file
my $log_file = catfile( $out_dir, 'convert-pheno-log.json' );

# Defining method
my $in_type =
    $in_pxf     ? 'pxf'
  : $in_bff     ? 'bff'
  : $in_redcap  ? 'redcap'
  : $in_cdisc   ? 'cdisc'
  : @omop_files ? 'omop'
  :               'bff';
my $out_type = $out_pxf ? 'pxf' : $out_bff ? 'bff' : 'bff';
my $method   = $in_type . '2' . $out_type;

# Defining data as a hashref
my $data = {
    out_dir     => $out_dir,
    in_textfile => 1,
    in_file     => $in_pxf ? $in_pxf
    : $in_bff    ? $in_bff
    : $in_redcap ? $in_redcap
    : $in_cdisc  ? $in_cdisc
    : undef,
    in_files                  => \@omop_files // undef,        # only for Omop
    method                    => $method,
    sep                       => $sep,
    sql2csv                   => $sql2csv,
    redcap_dictionary         => $redcap_dictionary,
    mapping_file              => $mapping_file,
    match                     => $match,
    ohdsi_db                  => $ohdsi_db,
    username                  => $username,
    max_lines_sql             => $max_lines_sql,
    min_text_similarity_score => $min_text_similarity_score,
    self_validate_schema      => $self_validate_schema,
    print_hidden_labels       => $print_hidden_labels,
    schema_file               => $schema_file,
    test                      => $test,
    debug                     => $debug,
    log                       => $log,
    verbose                   => $verbose
};
print Dumper $data if $debug;

# Start printing to STDOUT
say BOLD CYAN program_header($VERSION) if $verbose;

# Save log file if $log (before $data gets blessed)
write_log( $log_file, $data ) if $log;

#############################
# START DATA TRANSFORMATION #
#############################

convert( $out_file, $data );

###########################
# END DATA TRANSFORMATION #
###########################

sub convert {

    my ( $o_file, $l_data ) = @_;

    if ($verbose) {
        print BOLD BLUE program_body($l_data);
        say BOLD GREEN "Writing <$o_file> file\n";
    }

    # Creating object
    my $convert = Convert::Pheno->new($l_data);

    # Running $method and writing the results to $o_file
    my $method = $l_data->{method};
    io_yaml_or_json(
        { filepath => $o_file, mode => 'write', data => $convert->$method } );
}

sub program_header {

    my $version = shift;
    my $str     = <<EOF;
****************************************
*  Phenotypic Data Model Convert Tool  *
*          - CONVERT-PHENO -           *
*          Version: $version        *
*   (C) 2022-2023 Manuel Rueda, CNAG   *
*       The Artistic License 2.0       *
****************************************
EOF
    return $str;
}

sub program_body {

    my $l_data = shift;
    my $file =
      $l_data->{method} =~ m/^omop/
      ? join ',', @{ $l_data->{in_files} }
      : $l_data->{in_file};
    my $msg = <<EOF;
==== METHOD: <$l_data->{method}> ====
Processing: <$file>
EOF
    return $msg;
}

sub write_log {

    my ( $log, $data ) = @_;

    # NB: We will use anonymous (no effect on $data)
    chomp( my $ncpuhost = qx{/usr/bin/nproc} ) // 1;

    my $info = {
        date     => ( strftime "%a %b %e %H:%M:%S %Y", localtime ),
        ncpuhost => ( 0 + $ncpuhost ),                                # coercing it to be a number
        hostname => hostname,
        user     => $ENV{LOGNAME} || $ENV{USER} || getpwuid($<)
    };

    # Saving file
    say BOLD GREEN "Writing <$log> file\n" if $verbose;
    io_yaml_or_json(
        {
            filepath => $log,
            mode     => 'write',
            data     => { info => $info, data => $data }
        }
    );
}

=head1 NAME

B<UNDER DEVELOPMENT>

convert-pheno - A script to interconvert common data models for phenotypic data

=head1 SYNOPSIS

convert-pheno [-i input-type] <infile> [-o output-type] <outfile> [-options]

     Arguments:                       
       (input-type): 
             -ibff                    Beacon v2 Models (JSON|YAML) file
             -iomop                   OMOP-CDM CSV files or PostgreSQL dump
             -ipxf                    Phenopacket v2 (JSON|YAML) file
             -iredcap (experimental)  REDCap (raw data) export CSV file
             -icdisc  (experimental)  CDISC-ODM v1 XML file

             (Wish-list)
             #-ifhir                  HL7/FHIR
             #-openehr                openEHR

       (output-type):
             -obff                    Beacon v2 Models JSON file
             -opxf                    Phenopacket v2 JSON file

     Options:
       -debug                         Print debugging (from 1 to 5, being 5 max)
       -h|help                        Brief help message
       -log                           Save <convert-pheno-log.json> file
       -man                           Full documentation
       -mapping-file                  Fields mapping YAML (or JSON) file
       -match                         Type of search [>exact|mixed]
       -max-lines-sql                 Maxium number of lines read from SQL dump [500]
       -min-text-similarity-score     Minimum score for Sorensenâ€“Dice coefficient [0.8] (to be used with --match mixed)
       -nc|-no-color                  Don't print colors to STDOUT
       -ohdsi-db                      Use Athena-OHDSI database (~1.2GB) with -iomop
       -out-dir                       Output (existing) directory
       -phl|print-hidden-labels       Print original values (before DB mapping) of text fields <_labels>
       -rcd|redcap-dictionary         REDCap data dictionary CSV file
       -schema-file                   Alternative JSON Schema for mapping file
       -svs|self-validate-schema      Perform a self-validation of the JSON schema that defines mapping
       -sep|separator                 Delimiter character for CSV files
       -sql2csv                       Print SQL TABLES (with -iomop)
       -t|test                        Does not print time-changing-events (useful for file-based cmp)
       -u|username                    Set the username
       -verbose                       Verbosity on
       -v                             Print Version

=head1 DESCRIPTION

C<convert-pheno> is a command-line front-end to the CPAN's module L<Convert::Pheno>.

The module will be uploaded to CPAN once the paper is submitted.

=head1 SUMMARY

A script that uses L<Convert::Pheno> to interconvert common data models for phenotypic data

=head1 INSTALLATION

=head2 Containerized

Please download the C<Dockerfile> from the repo:

  wget https://raw.githubusercontent.com/mrueda/convert-pheno/main/Dockerfile

And then run:

  docker build -t cnag/convert-pheno:latest .

To run the container (detached) execute:

  docker run -tid --name convert-pheno cnag/convert-pheno:latest

To enter:

  docker exec -ti convert-pheno bash

The command-line executable can be found at:

  /usr/share/convert-pheno/bin/convert-pheno
 
Alternatively, you can use C<make> to perform all the previous steps:

  wget https://raw.githubusercontent.com/mrueda/convert-pheno/main/Dockerfile
  wget https://raw.githubusercontent.com/mrueda/convert-pheno/main/makefile.docker
  make -f makefile.docker install
  make -f makefile.docker run
  make -f makefile.docker enter

=head3 Mounting volumes

Docker containers are fully isolated. If you need the mount a volume to the container please use the following syntax (C<-v host:container>). 
Find an example below (note that you need to change the paths to match yours):

  docker run -tid --volume /media/mrueda/4TBT/data:/data --name convert-pheno-mount cnag/convert-pheno:latest

Then I will do something like this:

  # First I create an alias to simplify invocation (from the host)
  alias convert-pheno='docker exec -ti convert-pheno-mount /usr/share/convert-pheno/bin/convert-pheno'

  # Now I use the alias to run the command (note that I use the flag --out-dir to specify the output directory)
  convert-pheno -ibff /data/individuals.json -opxf pxf.bff --out-dir /data

=head2 Non containerized

The script runs on command-line Linux and it has been tested on Debian/RedHat based distributions (only showing commands for Debian's). Perl 5 is installed by default on Linux, 
but we will install a few CPAN modules with C<cpanminus>.

  git clone https://github.com/mrueda/convert-pheno.git
  cd convert-pheno

Now you have two choose between one of the 2 options below:

B<Option 1:> Install dependencies (they're harmless to your system) as C<sudo>:

  make install # (Will ask for sudo passwd)
  make test

B<Option 2:> Install the dependencies in a "virtual environment" (i.e., install the CPAN modules in the directory of the application). We'll be using with the module C<Carton>:

  make install-carton
  make test

=head3 System requirements

  * Ideally a Debian-based distribution (Ubuntu or Mint), but any other (e.g., CentOs, OpenSuse) should do as well.
  * Perl 5 (>= 5.10 core; installed by default in most Linux distributions). Check the version with "perl -v"
  * 1GB of RAM.
  * 1 core (it only uses one core per job).
  * At least 16GB HDD.

See note about RAM memory below.

=head1 HOW TO RUN CONVERT-PHENO

For executing convert-pheno you will need:

=over

=item Input file(s):
      
A text file in one of the accepted formats.

=item Optional: 

Athena-OHDSI database

Please download it from this L<link|https://drive.google.com/file/d/104ciON3zRc3ScAzzrL_3GO14aCnBLh-c/view?usp=sharing> (~1.2GB) and move it inside C<db/> directory.

=back

=head2 ABOUT SEARCH OPTIONS

=over

=item exact:

Retrieves only exact matches for a specified 'label',

=item mixed:

The script will begin by attempting an excat match for 'label', and if it is unsuccessful, it will then conduct a search based on string (phrase) similarity and select the ontology with the highest L<Sorensen-Dice|https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>. 

=back

=head3 Example (NCIT ontology): 

Search phrase: B<Exercise pain management> with C<exact> search.

- exact match: Exercise Pain Management

Search phrase: B<Brain Hemorrhage> with C<mixed> search.

- exact match: NA

- mixed match: Intraventricular Brain Hemorrhage

C<--min-text-similarity-score> sets the minimum value for the Sorensen-Dice coefficient.

Note that C<mixed> search requires more computational time and its results can be unpredictable. Please us it with caution.

B<Examples:>

 $ bin/convert-pheno -ipxf phenopackets.json -obff individuals.json

 $ $path/convert-pheno -ibff individuals.json -opxf phenopackets.yaml --out-dir my_out_dir 

 $ $path/convert-pheno -iredcap redcap.csv -opxf phenopackets.json --redcap-dictionary redcap_dict.csv --mapping-file mapping_file.yaml

 $ $path/convert-pheno -iomop dump.sql -obff individuals.json 

 $ $path/convert-pheno -cdisc cdisc_odm.xml -obff individuals.json --rcd redcap_dict.csv --mapping-file mapping_file.yaml --match mixed --min-text-similarity-score 0.6

 $ $path/convert-pheno -iomop *csv -obff individuals.json -sep ','

 $ carton exec -- $path/convert-pheno -ibff individuals.json -opxf phenopackets.json # If using Carton

=head2 COMMON ERRORS AND SOLUTIONS

Please be aware that we are reading input files and storing them in RAM memory (we do not use streams).
We never encountered such case, but it may become an issue if your file > 1GB and you do not have enough RAM memory.
One simple solution is to split the input file in many.

 * Error message: Foo
   Solution: Bar

 * Error message: Foo
   Solution: Bar

=head1 CITATION

The author requests that any published work that utilizes C<Convert-Pheno> includes a cite to the the following reference:

Rueda, M et al., (2023). Convert-Pheno: A software toolkit for the interconversion of standard data models for phenotypic data [Software]. Available from https://github.com/mrueda/convert-pheno

=head1 AUTHOR 

Written by Manuel Rueda, PhD. Info about CNAG can be found at L<https://www.cnag.crg.eu>.

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2022-2023, Manuel Rueda - CNAG.

This program is free software, you can redistribute it and/or modify it under the terms of the L<Artistic License version 2.0|perlartistic>.

=cut
