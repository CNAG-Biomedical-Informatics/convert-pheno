#!/usr/bin/env perl
#
#   A script that interconverts phenotypic data between different CDM formats
#
#   Last Modified: Jun/09/2022
#
#   Version 2.0.0
#
#   Copyright (C) 2021-2022 Manuel Rueda (manuel.rueda@crg.eu)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, see <https://www.gnu.org/licenses/>.
#
#   If this program helps you in your research, please cite.

use strict;
use warnings;
use feature qw(say);
use autodie;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use JSON::XS;
use File::Spec::Functions qw(catdir catfile);
use Path::Tiny;
use Term::ANSIColor qw(:constants);
$Data::Dumper::Sortkeys = 1;

my $debug   = 0;
my $verbose = 0;

##### Main #####
phenoconvert();
################
exit;

sub phenoconvert {

    # Defining a few variables
    my $version = '0.0.0b';
    my $out_dir = '.';

    # Reading arguments
    GetOptions(
        'input|i=s{1,}' => \my @in_files,                             # array
        'out-dir|o=s'   => \$out_dir,                                 # string
        'help|?'        => \my $help,                                 # flag
        'man'           => \my $man,                                  # flag
        'debug=i'       => \$debug,                                   # integer
        'verbose'       => \$verbose,                                 # flag
        'version|v'     => sub { say "$0 Version $version"; exit; }
    ) or pod2usage(2);
    pod2usage(1)                              if $help;
    pod2usage( -verbose => 2, -exitval => 0 ) if $man;
    pod2usage(
        -message => "Please specify a valid input file(s) -i <*json>\n",
        -exitval => 1
    ) unless (@in_files);
    pod2usage(
        -message => "Please specify a valid directory for --out-dir\n",
        -exitval => 1
    ) if ( !-d $out_dir );

    # Define a few more variables
    my $individuals_file = catfile( $out_dir, 'individuals.json' );

    # Start printing to STDOUT
    say BOLD CYAN program_header($version);

    #############################
    # START DATA TRANSFORMATION #
    #############################
    my $individuals = [];
    for my $file (@in_files) {
        say BOLD BLUE "==== Processing: <$file> ====", RESET;
        push @{$individuals}, map_phenoconvert($file);
    }
    say BOLD GREEN "Writing <$individuals_file> file\n";
    write_json( $individuals_file, $individuals );
    ###########################
    # END DATA TRANSFORMATION #
    ###########################
    return 1;
}

sub map_phenoconvert {

    my $pxf_file = shift;
    my $data     = read_json($pxf_file);

    # Get cursors for 1D terms
    my $interpretation = $data->{interpretation};
    my $phenopacket    = $data->{phenopacket};

    ####################################
    # START MAPPING TO BEACON V2 TERMS #
    ####################################

    # NB1: In general, we'll only load terms that exist
    # NB2: In PXF some terms are = []
    my $individual;

    # ========
    # diseases
    # ========
    $individual->{diseases} =
      [ map { $_ = { "diseaseCode" => $_->{term} } }
          @{ $phenopacket->{diseases} } ]
      if exists $phenopacket->{diseases};

    # ==
    # id
    # ==
    $individual->{id} = $phenopacket->{subject}{id}
      if exists $phenopacket->{subject}{id};

    # ====
    # info
    # ====

    # **** $data->{phenopacket} ****
    $individual->{info}{phenopacket}{dateOfBirth} =
      $phenopacket->{subject}{dateOfBirth};
    for my $term (qw (dateOfBirth genes meta_data variants)) {
        $individual->{info}{phenopacket}{$term} = $phenopacket->{$term}
          if exists $phenopacket->{$term};
    }

    # **** $data->{interpretation} ****
    $individual->{info}{interpretation}{phenopacket}{meta_data} =
      $interpretation->{phenopacket}{meta_data};

    # <diseases> and <phenotypicFeatures> are identical to those of $data->{phenopacket}{diseases,phenotypicFeatures}
    for my $term (
        qw (diagnosis diseases resolutionStatus phenotypicFeatures genes variants)
      )
    {
        $individual->{info}{interpretation}{$term} = $interpretation->{$term}
          if exists $interpretation->{$term};
    }

    # ==================
    # phenotypicFeatures
    # ==================
    $individual->{phenotypicFeatures} = [
        map {
            $_ = {
                "excluded" =>
                  ( exists $_->{negated} ? JSON::XS::true : JSON::XS::false ),
                "featureType" => $_->{type}
            }
        } @{ $phenopacket->{phenotypicFeatures} }
      ]
      if exists $phenopacket->{phenotypicFeatures};

    # ===
    # sex
    # ===
    $individual->{sex} = map_sex( $phenopacket->{subject}{sex} )
      if exists $phenopacket->{subject}{sex};

    ##################################
    # END MAPPING TO BEACON V2 TERMS #
    ##################################

    # print Dumper $individual;
    return $individual;
}

sub map_sex {

    my $str = lc(shift);
    my %sex = ( male => 'NCIT:C20197', female => 'NCIT:C16576' );
    return { "id" => "$sex{$str}", "label" => "$str" };
}

sub read_json {

    my $json_file = shift;
    my $str       = path($json_file)->slurp_utf8;
    my $json      = decode_json($str);           # Decode to Perl data structure
    return $json;
}

sub write_json {

    my ( $file, $json_array ) = @_;
    my $json = JSON::XS->new->utf8->canonical->pretty->encode($json_array);
    path($file)->spew_utf8($json);
    return 1;
}

sub program_header {

    my $version = shift;
    my $str     = <<EOF;
****************************************
*  Phenotypic Data Model Convert Tool  *
*          - PHENO-CONVERT -           *
*          Version: $version             *
*      (C) 2022 Manuel Rueda, PhD     *
*    GNU General Public License v3     *
****************************************
EOF
    return $str;
}

=head1 NAME

B<UNDER DEVELOPMENT>

B<WARNING> DO NOT TRY THIS AT HOME

A script that uses Convert::Pheno to interconverts phenotypic data between different CDM formats

=head1 SYNOPSIS


convert-pheno [-i input-type] <infile> [-o output-type] <outfile> [-options]

     Arguments:                       
       -i|input
            Formats:  
              -ipxf                   Phenopackets JSON file(s)
              -ibff                   Beacon v2 JSON filei (JSON array)

            (Wish-list)
             #-iomop                  OMOP-CDM csv file
             #-icdisc                 CDISC csv file
             #-ifhir                  FHIR csv file
             #-iredcap                RedCap csv file
       -o|output
            Formats:  
              -opxf                   Phenopackets JSON file (JSON array)
              -obff                   Beacon v2 JSON file (JSON array)

             (Wish-list)
             #-oomop                  OMOP-CDM csv file
             #-ocdisc                 CDISC csv file
             #-ofhir                  FHIR csv file
             #-oredcap                RedCap csv file

     Options:
       -out-dir                       Output (existing) directory
       -h|help                        Brief help message
       -man                           Full documentation
       -debug                         Print debugging (from 1 to 5, being 5 max)
       -verbose                       Verbosity on
     
=head1 CITATION

To be defined.

=head1 SUMMARY

A script that interconverts phenotypic data between different Common Data Models formats.

I<NB:> If the input file consists of is a JSON array the output file will also be a JSON array.

=head1 HOW TO RUN PHENO-CONVERT

The script runs on command-line Linux (tested on Debian-based distribution). Perl 5 is installed by default on Linux, 
but we will install a few CPAN modules with C<cpanminus>.

First we install cpanminus (with sudo privileges):

   $ sudo apt-get install cpanminus

Then the modules:

   $ cpanm --sudo --installdeps .

If you prefer to have the dependencies in a "virtual environment" (i.e., install the CPAN modules in the directory of the application) we recommend using the module C<Carton>.

   $ cpanm --sudo Carton

Then, we can install our dependencies:

   $ carton install

For executing convert-pheno you will need:

=over

=item Input file(s):
      
A list of Phenopackets JSON files (normally from the same dataset). Note that PXFs only contain ONE individual per file.

=back

B<Examples:>

   $ ./convert-pheno -ipxf in/*json -obff individuals.json

   $ $path/convert-pheno -ipxf file.json -obff individuals.json --out-dir my_bff_outdir

   $ $path/convert-pheno -ibff individuals.json -opxf phenopackets.json

   $ carton exec -- $path/convert-pheno -ibff individuals.json -opxf phenopackets.json # If using Carton

=head2 COMMON ERRORS AND SOLUTIONS

   * Error message: Foo
     Solution: Bar

   * Error message: Foo
     Solution: Bar


=head1 AUTHOR 

Written by Manuel Rueda, PhD. Info about CNAG can be found at L<https://www.cnag.crg.eu>.

=head1 REPORTING BUGS

Report bugs or comments to <manuel.rueda@cnag.crg.eu>.

=head1 COPYRIGHT

This PERL file is copyrighted. See the LICENSE file included in this distribution.

=cut
