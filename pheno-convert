#!/usr/bin/env perl
#
#   A script that converts Phenopackets PXF (JSON) to BFF (JSON)
#
#   Last Modified: May/18/2022
#
#   Version 2.0.0
#
#   Copyright (C) 2021-2022 Manuel Rueda (manuel.rueda@crg.eu)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, see <https://www.gnu.org/licenses/>.
#
#   If this program helps you in your research, please cite.

use strict;
use warnings;
use feature qw(say);
use autodie;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use JSON::XS;
use File::Spec::Functions qw(catdir catfile);
use Path::Tiny;
use Term::ANSIColor qw(:constants);
$Data::Dumper::Sortkeys = 1;

my $debug   = 0;
my $verbose = 0;

##### Main #####
pxf2bff();
################
exit;

sub pxf2bff {

    # Defining a few variables
    my $version = '2.0.0';
    my $out_dir = '.';

    # Reading arguments
    GetOptions(
        'input|i=s{1,}' => \my @in_files,                             # array
        'out-dir|o=s'   => \$out_dir,                                 # string
        'help|?'        => \my $help,                                 # flag
        'man'           => \my $man,                                  # flag
        'debug=i'       => \$debug,                                   # integer
        'verbose'       => \$verbose,                                 # flag
        'version|v'     => sub { say "$0 Version $version"; exit; }
    ) or pod2usage(2);
    pod2usage(1)                              if $help;
    pod2usage( -verbose => 2, -exitval => 0 ) if $man;
    pod2usage(
        -message => "Please specify a valid input file(s) -i <*json>\n",
        -exitval => 1
    ) unless (@in_files);
    pod2usage(
        -message => "Please specify a valid directory for --out-dir\n",
        -exitval => 1
    ) if ( !-d $out_dir );

    # Define a few more variables
    my $individuals_file = catfile( $out_dir, 'individuals.json' );

    # Start printing to STDOUT
    say BOLD CYAN program_header($version);

    #############################
    # START DATA TRANSFORMATION #
    #############################
    my $individuals = [];
    for my $file (@in_files) {
        say BOLD BLUE "==== Processing: <$file> ====", RESET;
        push @{$individuals}, map_pxf2bff($file);
    }
    say BOLD GREEN "Writing <$individuals_file> file\n";
    write_json( $individuals_file, $individuals );
    ###########################
    # END DATA TRANSFORMATION #
    ###########################
    return 1;
}

sub map_pxf2bff {

    my $pxf_file = shift;
    my $data     = read_json($pxf_file);

    # Get cursors for 1D terms
    my $interpretation = $data->{interpretation};
    my $phenopacket    = $data->{phenopacket};

    ####################################
    # START MAPPING TO BEACON V2 TERMS #
    ####################################

    # NB1: In general, we'll only load terms that exist
    # NB2: In PXF some terms are = []
    my $individual;

    # ========
    # diseases
    # ========
    $individual->{diseases} =
      [ map { $_ = { "diseaseCode" => $_->{term} } }
          @{ $phenopacket->{diseases} } ]
      if exists $phenopacket->{diseases};

    # ==
    # id
    # ==
    $individual->{id} = $phenopacket->{subject}{id}
      if exists $phenopacket->{subject}{id};

    # ====
    # info
    # ====

    # **** $data->{phenopacket} ****
    $individual->{info}{phenopacket}{dateOfBirth} =
      $phenopacket->{subject}{dateOfBirth};
    for my $term (qw (dateOfBirth genes meta_data variants)) {
        $individual->{info}{phenopacket}{$term} = $phenopacket->{$term}
          if exists $phenopacket->{$term};
    }

    # **** $data->{interpretation} ****
    $individual->{info}{interpretation}{phenopacket}{meta_data} =
      $interpretation->{phenopacket}{meta_data};

    # <diseases> and <phenotypicFeatures> are identical to those of $data->{phenopacket}{diseases,phenotypicFeatures}
    for my $term (
        qw (diagnosis diseases resolutionStatus phenotypicFeatures genes variants)
      )
    {
        $individual->{info}{interpretation}{$term} = $interpretation->{$term}
          if exists $interpretation->{$term};
    }

    # ==================
    # phenotypicFeatures
    # ==================
    $individual->{phenotypicFeatures} = [
        map {
            $_ = {
                "excluded" =>
                  ( exists $_->{negated} ? JSON::XS::true : JSON::XS::false ),
                "featureType" => $_->{type}
            }
        } @{ $phenopacket->{phenotypicFeatures} }
      ]
      if exists $phenopacket->{phenotypicFeatures};

    # ===
    # sex
    # ===
    $individual->{sex} = map_sex( $phenopacket->{subject}{sex} )
      if exists $phenopacket->{subject}{sex};

    ##################################
    # END MAPPING TO BEACON V2 TERMS #
    ##################################

    # print Dumper $individual;
    return $individual;
}

sub map_sex {

    my $str = lc(shift);
    my %sex = ( male => 'NCIT:C20197', female => 'NCIT:C16576' );
    return { "id" => "$sex{$str}", "label" => "$str" };
}

sub read_json {

    my $json_file = shift;
    my $str       = path($json_file)->slurp_utf8;
    my $json      = decode_json($str);           # Decode to Perl data structure
    return $json;
}

sub write_json {

    my ( $file, $json_array ) = @_;
    my $json = JSON::XS->new->utf8->canonical->pretty->encode($json_array);
    path($file)->spew_utf8($json);
    return 1;
}

sub program_header {

    my $version = shift;
    my $str     = <<EOF;
****************************************
*  Beacon v2 Reference Implementation  *
*             - PHX2BFF -              *      
*           Version: $version             *
*   (C) 2021-2022 Manuel Rueda, PhD    *
*    GNU General Public License v3     *
****************************************
EOF
    return $str;
}

=head1 NAME

A script that converts Phenopackets PXF (JSON) to BFF (JSON)

=head1 SYNOPSIS


pxf2bff -i <*.json> [-options]

     Arguments:                       
       -i|input                       Phenopackets JSON files

     Options:
       -o|out-dir                     Output (existing) directory for the BFF files
       -h|help                        Brief help message
       -man                           Full documentation
       -debug                         Print debugging (from 1 to 5, being 5 max)
       -verbose                       Verbosity on
     
=head1 CITATION

The author requests that any published work which utilizes Beacon includes a cite to the the following reference:

Rueda, M, Ariosa R. "Beacon v2 Reference Implementation: a software for federated discovery of genomic and phenoclinic data". I<Submitted>.

=head1 SUMMARY

A script that converts Phenopackets PXF (JSON) to BFF (JSON).

Note that PXF contain one individual per file (1 JSON document), whereas BFF (majoritarily) contain multiple inviduals per file (JSON array of documentsa). Thus, the input should be PXF JSON from, say, the same dataset, and the output will be a unique C<individuals.json> file.

I<NB:> The script was created to parse L<RD_Connect synthetic data|https://ega-archive.org/datasets/EGAD00001008392>. See examples in the C<in> and C<out> directories. The script is B<UNTESTED> for other PXFs.

=head1 HOW TO RUN PXF2BFF

The script runs on command-line Linux (tested on Debian-based distribution). Perl 5 is installed by default on Linux, 
but you might need to manually install a few CPAN modules.

    * JSON::XS
    * Path::Tiny
    * Term::ANSIColor

First we install cpanminus (with sudo privileges):

   $ sudo apt-get install cpanminus

Then the modules:

   $ cpanm --sudo JSON::XS Path::Tiny Term::ANSIColor

For executing pxf2bff you will need:

=over

=item Input file(s):
      
A list of Phenopackets JSON files (normally from the same dataset). Note that PXFs only contain ONE individual per file.

=back

B<Examples:>

   $ ./pxf2bff -i in/*json -o out

   $ $path/pxf2bff -i file.json --out-dir my_bff_outdir

   $ $path/pxf2bff -i my_indir/*json -o my_bff_outdir 


=head2 COMMON ERRORS AND SOLUTIONS

   * Error message: Foo
     Solution: Bar

   * Error message: Foo
     Solution: Bar


=head1 AUTHOR 

Written by Manuel Rueda, PhD. Info about CRG can be found at L<https://www.crg.eu>.

=head1 REPORTING BUGS

Report bugs or comments to <manuel.rueda@crg.eu>.

=head1 COPYRIGHT

This PERL file is copyrighted. See the LICENSE file included in this distribution.

=cut
